# create a mongo service that the app can reference and point to
apiVersion: v1
kind: Service
metadata:
  name: mongo
  labels:
    app: mongo
spec:
  ports:
  - port: 27017
    name: http
  selector:
    app: mongo
--- # indicates it's a new file

# actually create the database deployment for pod
apiVersion: apps/v1

kind: Deployment

metadata:
  name: mongo
spec:
  selector:
    matchLabels:
      app: mongo
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
        - name: mongo
          image: mongo
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongovolume
              mountPath: /data/db
      volumes:
        - name: mongovolume
          persistentVolumeClaim:
            claimName: mongo-db
--- # indicates it's a new file

# launching our application
apiVersion: apps/v1

kind: Deployment


metadata:
  name: app
spec:
  selector:
    matchLabels:
      app: app
  replicas: 3
  template:
    metadata:
      labels:
        app: app
    spec:
      containers:
        - name: app
          image: fredericoco121/small_app_update
          ports:
            - containerPort: 80
          imagePullPolicy: IfNotPresent
          env: 
          - name: DB_HOST
            value: 'mongodb://mongo:27017/posts'
--- # indicates it's a new file

# create the loadbalancer for app
apiVersion: v1
kind: Service

metadata:
  name: app-svc
  name: default
spec:
  selector:
    app: app
  ports:
  - port: 80
    targetPort: 3000
    nodePort: 30000
    protocol: TCP
  selector:
    app: app
  sessionAffinity: None
  type: LoadBalancer